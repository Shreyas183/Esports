rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isOrganizer() {
      return hasRole('organizer') || isAdmin();
    }
    
    function isPlayer() {
      return hasRole('player') || isOrganizer();
    }
    
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidVideoType() {
      return request.resource.contentType.matches('video/.*');
    }
    
    function isValidSize(maxSize) {
      return request.resource.size <= maxSize;
    }
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public read access for profile pictures
      allow write: if isOwner(userId) 
        && isValidImageType() 
        && isValidSize(5 * 1024 * 1024); // 5MB limit
    }
    
    // Team logos
    match /teams/{teamId}/logo/{fileName} {
      allow read: if true; // Public read access for team logos
      allow write: if isAuthenticated() && (
        // Team captain or admin can upload logo
        firestore.get(/databases/(default)/documents/teams/$(teamId)).data.captainId == request.auth.uid ||
        isAdmin()
      ) && isValidImageType() && isValidSize(2 * 1024 * 1024); // 2MB limit
    }
    
    // Tournament banners
    match /tournaments/{tournamentId}/banner/{fileName} {
      allow read: if true; // Public read access for tournament banners
      allow write: if isAuthenticated() && (
        firestore.get(/databases/(default)/documents/tournaments/$(tournamentId)).data.organizerId == request.auth.uid ||
        isAdmin()
      ) && isValidImageType() && isValidSize(10 * 1024 * 1024); // 10MB limit
    }
    
    // Payment QR codes
    match /tournaments/{tournamentId}/qr/{fileName} {
      allow read: if isAuthenticated(); // Authenticated users can view QR codes
      allow write: if isAuthenticated() && (
        firestore.get(/databases/(default)/documents/tournaments/$(tournamentId)).data.organizerId == request.auth.uid ||
        isAdmin()
      ) && isValidImageType() && isValidSize(2 * 1024 * 1024); // 2MB limit
    }
    
    // Payment proofs
    match /registrations/{registrationId}/payment/{fileName} {
      allow read: if isAuthenticated() && (
        // Registration owner, tournament organizer, or admin can view
        firestore.get(/databases/(default)/documents/registrations/$(registrationId)).data.userId == request.auth.uid ||
        firestore.get(/databases/(default)/documents/tournaments/$(firestore.get(/databases/(default)/documents/registrations/$(registrationId)).data.tournamentId)).data.organizerId == request.auth.uid ||
        isAdmin()
      );
      allow write: if isAuthenticated() && (
        firestore.get(/databases/(default)/documents/registrations/$(registrationId)).data.userId == request.auth.uid
      ) && isValidImageType() && isValidSize(5 * 1024 * 1024); // 5MB limit
    }
    
    // Highlight videos and thumbnails
    match /highlights/{highlightId}/{type}/{fileName} {
      allow read: if true; // Public read access for highlights
      allow write: if isOrganizer() 
        && (type == 'video' ? isValidVideoType() : isValidImageType())
        && (type == 'video' ? isValidSize(100 * 1024 * 1024) : isValidSize(5 * 1024 * 1024)); // 100MB for videos, 5MB for thumbnails
    }
    
    // Sponsor logos
    match /sponsors/{sponsorId}/logo/{fileName} {
      allow read: if true; // Public read access for sponsor logos
      allow write: if isOrganizer() 
        && isValidImageType() 
        && isValidSize(2 * 1024 * 1024); // 2MB limit
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) 
        && (isValidImageType() || isValidVideoType())
        && isValidSize(100 * 1024 * 1024); // 100MB limit
    }
  }
}